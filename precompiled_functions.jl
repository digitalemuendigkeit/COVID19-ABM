precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Compose.docfunc), Symbol, String})
precompile(Tuple{getfield(ArrayInterface, Symbol("#63#66"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#64#67"))})
precompile(Tuple{getfield(ArrayInterface, Symbol("#65#68"))})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(DocStringExtensions.template_hook), LineNumberNode, Module, String, Expr})
precompile(Tuple{Type{Ref{WebIO.WebIOServer{S} where S}}})
precompile(Tuple{typeof(Base.:(|)), Bool, Bool})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, REPL.LineEdit.Prompt}, Vararg{Base.Pair{Symbol, REPL.LineEdit.Prompt}, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#45#76"))}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.convert), Type{Any}, Char})
precompile(Tuple{typeof(Base.convert), Type{Any}, REPL.LineEdit.KeyAlias})
precompile(Tuple{typeof(Base.convert), Type{Any}, Function})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{Char, Any}})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#74#105")){REPL.LineEdit.HistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#49#58")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#251#255")){REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#39#42")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{getfield(Plots, Symbol("#244#277")), REPL.LineEditREPL})
precompile(Tuple{typeof(Base.convert), Type{Any}, REPL.REPLHistoryProvider})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(Base.:(==)), Gadfly.GadflyDisplay, REPL.REPLDisplay{REPL.LineEditREPL}})
precompile(Tuple{typeof(Base.:(==)), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, REPL.REPLDisplay{R} where R<:REPL.AbstractREPL})
precompile(Tuple{Type{REPL.LineEdit.PromptState}, REPL.Terminals.AbstractTerminal, REPL.LineEdit.Prompt, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Array{Base.GenericIOBuffer{Array{UInt8, 1}}, 1}, Int64, REPL.LineEdit.InputAreaState, Int64, Base.AbstractLock, Float64, Float64})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.HistoryPrompt})
precompile(Tuple{typeof(REPL.LineEdit.init_state), Any, REPL.LineEdit.PrefixHistoryPrompt})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.prompt_string), Function})
precompile(Tuple{typeof(REPL.LineEdit.prompt_string), AbstractString})
precompile(Tuple{getfield(Main, Symbol("#5#8")), String})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{String, Any}, 1}, Base.Dict{String, Any}, Base.Generator{Array{Any, 1}, typeof(Pkg.TOML.table2dict)}, Int64})
precompile(Tuple{typeof(Base.similar), Array{Atom.OutlineItem, 1}, Type{T} where T})
precompile(Tuple{getfield(Atom, Symbol("#279#281")), FuzzyCompletions.PathCompletion})
precompile(Tuple{typeof(Base.invokelatest), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##invokelatest#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any, N} where N})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL.LineEdit, Symbol("#111#164")), String}, Any, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#refresh_multi_line##kw")), Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(Base.:(&)), UInt8, UInt8})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL.LineEdit, Symbol("#133#186")), String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.deactivate), REPL.LineEdit.TextInterface, REPL.LineEdit.ModeState, Any, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/prs.juno.jlpane")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/juno+plotpane")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("application/prs.juno.plotpane+html")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/png")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/jpeg")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/tiff")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/bmp")}, Any})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/gif")}, Any})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Atom.nativetype), Module, Symbol, Any})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Function})
precompile(Tuple{typeof(Media.render), Juno.Inline, Type{T} where T})
precompile(Tuple{typeof(Atom.wstype), Module, Symbol, Any})
precompile(Tuple{typeof(Atom.wsicon), Module, Symbol, Any})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Char, Char}})
precompile(Tuple{getfield(Widgets, Symbol("#@manipulate")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{Tuple{Symbol, Int32}, Nothing}}})
precompile(Tuple{typeof(Base.hash), Tuple{Symbol, Int32}, UInt64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Tuple{Symbol, Int32}, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Tuple{Symbol, Int32}, Nothing}, Tuple{Symbol, Int32}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Tuple{Symbol, Int32}, Nothing}, Nothing, Tuple{Symbol, Int32}})
precompile(Tuple{typeof(Base._unique!), getfield(Atom, Symbol("#312#314")), Array{Method, 1}, Base.Set{Tuple{Symbol, Int32}}, Int64, Int64})
precompile(Tuple{typeof(LibGit2.GitRepoExt), String, UInt32})
precompile(Tuple{typeof(LibGit2.GitRepoExt), String})
precompile(Tuple{typeof(Base.fileurl), String})
